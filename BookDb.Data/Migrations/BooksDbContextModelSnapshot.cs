// <auto-generated />
using System;
using BookDb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookDb.Data.Migrations
{
    [DbContext(typeof(BooksDbContext))]
    partial class BooksDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookDb.Data.Models.BookCreatorModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatorModelId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("StoryModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("TypeModelId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorModelId");

                    b.HasIndex("StoryModelId");

                    b.HasIndex("TypeModelId");

                    b.ToTable("BookCreators", "Book");
                });

            modelBuilder.Entity("BookDb.Data.Models.BookModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books", "Book");
                });

            modelBuilder.Entity("BookDb.Data.Models.CreatorModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NameModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NameModelId");

                    b.ToTable("Creators", "Book");
                });

            modelBuilder.Entity("BookDb.Data.Models.CreatorTypeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("CreatorTypes", "Book");
                });

            modelBuilder.Entity("BookDb.Data.Models.EditionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("PublishedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PublishedWhen")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PublishedById");

                    b.ToTable("Editions", "Book");
                });

            modelBuilder.Entity("BookDb.Data.Models.GenreModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid?>("StoryModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoryModelId");

                    b.ToTable("Genres", "Book");
                });

            modelBuilder.Entity("BookDb.Data.Models.PersonNameModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.ToTable("Name", "People");
                });

            modelBuilder.Entity("BookDb.Data.Models.PublisherModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers", "Book");
                });

            modelBuilder.Entity("BookDb.Data.Models.StoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SeriesOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stories", "Book");
                });

            modelBuilder.Entity("BookModelEditionModel", b =>
                {
                    b.Property<long>("BooksId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("EditionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "EditionsId");

                    b.HasIndex("EditionsId");

                    b.ToTable("BookEditions", "Book");
                });

            modelBuilder.Entity("BookModelStoryModel", b =>
                {
                    b.Property<long>("BooksId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("StoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "StoriesId");

                    b.HasIndex("StoriesId");

                    b.ToTable("BookStories", "Book");
                });

            modelBuilder.Entity("BookDb.Data.Models.BookCreatorModel", b =>
                {
                    b.HasOne("BookDb.Data.Models.CreatorModel", "CreatorModel")
                        .WithMany()
                        .HasForeignKey("CreatorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookDb.Data.Models.StoryModel", "StoryModel")
                        .WithMany("Creators")
                        .HasForeignKey("StoryModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookDb.Data.Models.CreatorTypeModel", "TypeModel")
                        .WithMany()
                        .HasForeignKey("TypeModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorModel");

                    b.Navigation("StoryModel");

                    b.Navigation("TypeModel");
                });

            modelBuilder.Entity("BookDb.Data.Models.CreatorModel", b =>
                {
                    b.HasOne("BookDb.Data.Models.PersonNameModel", "NameModel")
                        .WithMany()
                        .HasForeignKey("NameModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NameModel");
                });

            modelBuilder.Entity("BookDb.Data.Models.EditionModel", b =>
                {
                    b.HasOne("BookDb.Data.Models.PublisherModel", "PublishedBy")
                        .WithMany()
                        .HasForeignKey("PublishedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublishedBy");
                });

            modelBuilder.Entity("BookDb.Data.Models.GenreModel", b =>
                {
                    b.HasOne("BookDb.Data.Models.StoryModel", null)
                        .WithMany("Genres")
                        .HasForeignKey("StoryModelId");
                });

            modelBuilder.Entity("BookModelEditionModel", b =>
                {
                    b.HasOne("BookDb.Data.Models.BookModel", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookDb.Data.Models.EditionModel", null)
                        .WithMany()
                        .HasForeignKey("EditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookModelStoryModel", b =>
                {
                    b.HasOne("BookDb.Data.Models.BookModel", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookDb.Data.Models.StoryModel", null)
                        .WithMany()
                        .HasForeignKey("StoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookDb.Data.Models.StoryModel", b =>
                {
                    b.Navigation("Creators");

                    b.Navigation("Genres");
                });
#pragma warning restore 612, 618
        }
    }
}
